---
title: "Developing R packages"
author: 
  - Kathryn Doering
  - Elizabeth Gugliotti
  - Bai Li
toc: true
format:
  html:
    theme: cerulean
editor: visual
---

## NSAW Training Agenda

9 am - 12:30 pm (followed by lunch 12:30 - 2 pm)

- 9 am - 9:15 am - Introductions and Poll
- 9:15 am - 10:15am - Content
- 10:15 am - 10:30 am - Break
- 10:30 am - 11:30 am - Content
- 11:30 am - 11:45 am - Break
- 11:45 am - 12:30 pm - Content

## Why create an R package?

The R packages book calls the R package "the fundamental unit of shareable, reusable, and reproducible R code". Create an R package to:

- organize code and/or data
- share code and/or data easily
- collaborate with others using standard conventions for organization
- test and document using standard frameworks

## When should I create an R package?

- You have something you want to be organized, well tested, and/or well documented
- You have something you want to share or collaborate with others on

## Let's dissect an R package!!

Before jumping into writing our own R package, let's check out someone else's.

### Introducing {cowsay}

```{r}
# install.packages("cowsay")
# or you can install from github
# remotes::install_github("sckott/cowsay")
library(cowsay)
say("Welcome to cowsay!")

```

`cowsay::say()` returns an animal (by default, a cat) saying the message you included (yes, that is really it). You can also specify what animal you would like to say the message. `say()`is the only function in this package.

```{r}
say(what = "Let's look at cowsay!", by = "shark")
```

There is also an option to get a fact about cats:

```{r}
say(what = "catfact")
```

There are more examples on the [cowsay website](https://sckott.github.io/cowsay/).

###  Examine the {cowsay} source code

The source code for the cowsay R package [is available on GitHub](https://github.com/sckott/cowsay). We'll take a look at its anatomy to better understand R packages but at its base, an R package is essentially a collection of functions and/or data.

::: {.callout-note}
Need a reminder of R package anatomy (and other developer tips)? Download this handy [Package Development Cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/package-development.pdf).
:::

## Design an R package

Our goal will be to build our own R package, either:

1. Using functions you brought
2. Using functions based on {cowsay}.

Start designing your R package! Write 2 functions that you want to include in it. (Hint: look at the documentation for cowsay using `?cowsay::say` in the R console to see what is possible with the package)

Some questions to answer about the package:

1. What do you want to name your package? (according to [Writing R Extensions](https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#Package-structure), "[Package Names] should contain only (ASCII) letters, numbers and dot, have at least two characters and start with a letter and not end in a dot." This means no "_" in names are allowed)
2. Can you write a 2 sentence description of your package?
3. What functions would you like to put in the package?
4. How could you test your functions?
5. Which R packages do you need to rely on to run the code in your package (in addition to cowsay)?

## Let's build our own R package! 

### Where do we begin?

[{devtools}](https://devtools.r-lib.org/) is an essential R package for the R package developer. It provides a diverse set of tools to make it quick and easy to use.

[{usethis}](https://usethis.r-lib.org/) provides common R utilities for both R users and R developers. In this case, we'll start by running `usethis::create_package()` will create a skeleton R package for you. No need to manually create a bunch of folders!

Let's start by creating the package and add cowsay to our dependencies.

```{r}
#| eval=FALSE
usethis::create_package()

# You will need to provide a file path with path = "your_filepath" if not 
# working within an Rstudio project at first. After you run create_package(),
# an Rstudio project will be created for your package.
```

If we are using cowsay in our codebase, so we will want to included it as a dependency. This means we'll add it to the Imports section of our DESCRIPTION file:
```{r}
#| eval=FALSE
usethis::use_package("cowsay", type = "Imports")

```

### Edit the DESCRIPTION file

Let's add in important metadata to our DESCRIPTION file. We'll open it up and replace the default elements with more specific metadata for our package.

::: {.callout-note}
Need more information on what goes in each section? The [Description Chapter of R Packages](https://r-pkgs.org/description.html) is a great reference.
:::

::: {.callout-tip}
## Which version conventions should I use?

To create a minimal R package, only package name and version number are needed in the DESCRIPTION file.
Version is very important as a way of communicating where your package is in its lifecycle. 
A released version number consists of three numbers, `<major>.<minor>.<patch>`. More details can be found in the [Lifecycle Chapter of R packages](https://r-pkgs.org/lifecycle.html#sec-lifecycle-version-number). There are many versioning schemes, but a commonly used one is [semantic versioning](https://semver.org/).
:::

::: {.callout-tip}
## Which License Should I Use?

This is not an straightforward question, but MIT and versions of GPL are common licenses for [open source](https://opensource.org/) R packages. 
[CC0-1.0](https://creativecommons.org/publicdomain/zero/1.0/) is also used, but 
is [not intended for software](https://creativecommons.org/faq/#can-i-apply-a-creative-commons-license-to-software). 
Some additional guidance is 
[in the Licenses for Government Work page of NMFS Open Science](https://nmfs-opensci.github.io/ResourceBook/content/licenses_gov.html#licenses) 
and in the 
[Licensing chapter of the R packages book](https://r-pkgs.org/license.html).
:::

### Add in an R function

R code is added in the `R/` directory. It is up to you to organize the R code there. Some authors like to put only one R function per `.R` file, while others will organize several functions in the same script.

::: {.callout-note}
Some older packages may have `.r` (lowercase) file extensions. However, `.R` (uppercase) should always be used as the file extension for any scripts you create in your R package.
:::

::: {.callout-note}
The R package book provides some [suggestions on organizing R code](https://r-pkgs.org/code.html#sec-code-organising) as well as [suggestions to limit modifying global R settings](https://r-pkgs.org/code.html#sec-code-r-landscape).
:::

Need an R function to add? This one can be copied and pasted into your package.
```{r}
#| eval=FALSE
shark_say <- function(words = "I'm a shark!") {
  cowsay::say(what = words, by = "shark")
  invisible(words)
}
```
Remember that you NEVER want to use `library()` before a function but rather `usethis::use_package("package")` to include a required package in the imports. To use a function in a package you can either use the `package::function` convention in the code, e.g. `cowsay::say()` or include `@importFrom package function` (e.g., `@importFrom cowsay say`) in the roxygen documentation of the function to use just `say()` in the code.
The `invisible()` function is useful instead of `return()` when you don't want the returned output to be printed, such as when returning all of the output of a model.

### Try loading your package!

`devtools::load_all()` is the standard way to load your packages and test them 
out interactively. It simulates installing and loading a package with `library()`, 
but it does not install the package on disk. Another alternative is `devtools::install_local()`, which actually installs the package locally in your R library.

```{r}
#| eval=FALSE
devtools::load_all()
```

Did `devtools::load_all()` work? Try using one of the functions that you just added
to your package. If not, let's troubleshoot.

### Add documentation to your function

R code is documented using [{roxygen2}](https://roxygen2.r-lib.org/). Here is an example of [thorough documention in cowsay::say](https://github.com/sckott/cowsay/blob/d2c105caa94e9ff1868550eecd16547686a5030b/R/say.r#L1) as well as [shorter documentation](https://github.com/sckott/cowsay/blob/main/R/endless_horse.R#L1).

Using these examples, add documentation to the functions in your R package. Note that the `@export` tag should be used if you want users to be able to access the function directly. 

Within the RStudio IDE you can use a shortcut to add the {roxygen2} skeleton documentation. To do this, click inside the function and then for Windows: `Ctrl+Alt+Shift+R` and for Mac: `Cmd+Option+Shift+R` which will give you this:
```{r}
#| eval=FALSE
#' Title
#'
#' @param words 
#'
#' @return
#' @export
#'
#' @examples
```
### Update the package documentation and create a `NAMESPACE` file

Use `devtools::document()` in your console or terminal to automatically update the package's documentation. 
This will generate `.Rd` files in the `man/` folder and update the `NAMESPACE` 
file. NEVER edit the `.Rd` and `NAMESPACE` files directly. The `NAMESPACE` file is generated with the {roxygen2} package, using specific tags (e.g., `@export`) located in a roxygen comment above each functions's definition. A specific namespace disambiguates functions with the same name (e.g., `remotes::install_github()` and `devtools::install_github()`). 

You can also use `usethis::use_package_doc()` to create a package documentation file that will show up when you use `?packagename`.

If you would like to view your latest documentation, use `devtools::load_all()`, which automatically runs `devtools::document()`. The documentation can then be called as it normally would through R, e.g., by using `?pkg::function` in the R console.

### Adding a vignette to your package
Vignettes are instructive tutorials demonstrating practical uses of the package. If you would like to add a [vignette](https://r-pkgs.org/vignettes.html#advice-on-writing-vignettes) to your package you can use `usethis::use_vignette("vignette_name")` which will set up a skeleton vignette as a `.Rmd` file. You can build vignettes with the `devtools::build_vignettes()` function. The resulting vignettes will be in the `inst/doc` folder.  

### Adding data to your package
If there is [data](https://r-pkgs.org/data.html) that you would like to make available in the package, you can include it using `usethis::use_data_raw()` which will create a folder called `data_raw` where you will add your dataset. From there, you will edit the `DATASET.R` file that was automatically created.
```{r}
#| eval=FALSE
your_data <- read.csv("data-raw/your_data.csv", header = TRUE)
usethis::use_data(your_data, overwrite = TRUE)
```
You will run this code and it will create the data file which contains your data as a `.rda` file which you can access with `data("your_data")`. You don't have to keep the data-raw folder after converting your data to `.rda`.

## Add testing to your package

### Introducing {testthat}

[{testthat}](https://testthat.r-lib.org/) is the testing framework used for R code. 
{testthat} can be used through `devtools::test()`. Let's look at [the tests in cowsay](https://github.com/sckott/cowsay/blob/d2c105caa94e9ff1868550eecd16547686a5030b/tests/testthat/test-say.R#L3).


### Why Test?

There are [many good reasons](https://r-pkgs.org/testing-basics.html#why-is-formal-testing-worth-the-trouble) for writing tests rather than testing 
code interactively. Some of these are that testing: 

- Ensures the code does what you think it does when you wrote it
- Helps conceptualize the problem differently
- Allows anyone with the package code to run your test
- Saves you from yourself! Every time you make a code modification you can easily run the test-- then you know right away if anything broke.

::: {.callout-note}
More info on testing is available in this [testing and CI resources doc](https://docs.google.com/document/d/1niw8CzrnZJSeJ-0PQ4IYD9FH9hlO8qs63v0dE6AXYmI/edit?usp=sharing) (must be logged into your NOAA email address to view).
:::

### Add a test to your package

`usethis::use_testthat()` gives us the structure we need for writing our first test! 

Note that all test script names should begin with `test-` and a common practice is to use write all the tests for a `.R` script in a corresponding testing script with the same name but prepended with `test-`. So for example, if the R code is in `R/sayfunctions.R`, all of the tests for that R code would be in `tests/testthat/test-sayfunctions.R`.

You can use `usethis::use_test(shark_say)` to create a testthat file where you can write your test. 

Here is an example test for the sharksay function, to test that it does actually return the text specified by the user in `words`:

```{r}
#| eval=FALSE
test_that("sharksay returns the text specified in words", {
   phrase <- "Hi there"
   phrase_from_sharksay <- sharksay(words = phrase)
   expect_equal(phrase_from_sharksay, phrase)
})
```

Note that there are many [expectations](https://testthat.r-lib.org/reference/index.html#expectations) that can be used depending on the expected output.

Add a test to your package! 

### Run the test

Use `devtools::test()` to run all of the tests. Check out the documentation for `devtools::test()` for ways to run just one of the test scripts. For example, use `devtools::test(filter = “place_holder”)` to run tests in `tests/testthat/test-place_holder.R`.

### Debugging

[Debugging](https://adv-r.hadley.nz/debugging.html) is necessary if your tests are failing. `browser()` is one way that R code can be debugged. The Rstudio IDE is best integrated with this approach, although it can be used with other IDEs as well. Another useful function for debugging a function is the `traceback()` function.

## Check the package

You want to make sure you set up the package correctly! You can do this by running `devtools::check()`. If it passes, your R package is valid and someone could download and use it! If it does not, you should get specific guidance on what needs to be fixed.

## Sharing your R package

R packages can be shared easily using online platforms like GitHub. For instance, anyone can install your package if it is up on GitHub using `remotes::install_github()` or `devtools::install_github()`.

:::{.callout-note}
Learn more about [using GitHub for work at NOAA Fisheries](https://nmfs-opensci.github.io/GitHub-Guide/)
:::

Sharing on CRAN, [rOpenSci](https://ropensci.org/), or the [NOAA Fisheries Integrated Toolbox](https://noaa-fisheries-integrated-toolbox.github.io/) are other possibilities for an R package with a wider audience.

## Extras

### Spellcheck

`devtools::spell_check()` is a great tool for checking spelling mistakes in your package. It can be run using `devtools::spell_check()`. It wraps a function in [{spelling}](https://docs.ropensci.org/spelling/). There is an option to use the [WORDLIST](https://docs.ropensci.org/spelling/reference/wordlist.html) file to include words that aren't in the dictionary but are not spelling mistakes. `spelling::update_wordlist()` will automatically create this file for you.

### Style R code
`styler::style_pkg()` styles R code according to the [tidyverse style guide](https://style.tidyverse.org/). It helps to keep the coding style consistent across files.

### Setting up GitHub Actions

The [{ghactions4r}](https://nmfs-fish-tools.github.io/ghactions4r/) package can be used to simplify maintenance and setup of common GitHub Action workflows for R packages.

## References for package development

To continue learning about package development, here are some resources:

- [R packages book](https://r-pkgs.org/)
- [Writing R extensions](https://cran.r-project.org/doc/manuals/r-release/R-exts.html), the official CRAN documentation
- [R packages Cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/package-development.pdf)
- [Eli Holmes' 2020 training on R packages](https://rverse-tutorials.github.io/RWorkflow-NWFSC-2020/week4-packages.html)
- [Package Development: The Mechanics clinic by Maëlle Salmon](https://rpkgdev-mechanics.netlify.app/)

